一、系统概述
1.1 功能模块
用户模块：提供注册和登录功能，允许用户创建账户并登录系统，方便后续操作。
商品管理模块：支持商品的添加、删除和编辑操作，管理员可对商品信息进行有效管理。
数据库管理模块：负责数据库的创建、导入和导出操作，确保数据的安全存储和管理。
商品可视化管理模块：通过图表展示各类商品的销售占比、不同种类商品的平均价格等信息，辅助决策。
1.2 技术架构
后端：使用 Flask 框架开发，结合 Flask - SQLAlchemy 进行数据库操作。Flask 是一个轻量级的 Python Web 框架，具有简洁灵活的特点，适合快速开发 Web 应用。Flask - SQLAlchemy 简化了与 SQL 数据库的交互，提高开发效率。
前端：暂未详细说明，但从整体功能推测，可能使用 HTML、CSS 和 JavaScript 构建用户界面，实现页面的展示和交互功能。
数据库：采用 MySQL 数据库，用于存储用户信息、商品信息、订单信息等数据。MySQL 是一种广泛使用的开源关系型数据库，具有性能稳定、可扩展性强等优点。
开发工具：使用 Pycharm 作为开发集成环境，XAMPP Control Panel 提供服务器环境，navicat 用于数据库管理。
二、系统设计
2.1 数据库设计
表结构
user：存储用户信息，如姓名、电子邮件、密码等。
product：记录商品信息，包括商品 ID、名称、价格、描述、数量等。
category：管理商品类别，可分为一级类别和二级类别，方便商品分类管理。
order：保存订单信息，关联用户和购买的商品。
order_item：记录订单中的商品明细，包括商品数量、价格等。
comment：存储用户对商品的评论信息。
关系设计
user与order是一对多关系，一个用户可以有多个订单。
order与order_item是一对多关系，一个订单包含多个商品明细。
product与order_item是多对多关系，一种商品可以出现在多个订单中，一个订单也可以包含多种商品。
product与category是多对多关系，一种商品可以属于多个类别，一个类别可以包含多种商品。
user与comment是一对多关系，一个用户可以发表多条评论。
product与comment是一对多关系，一个商品可以有多个评论。
2.2 功能模块设计
注册登录功能
注册：用户访问/register页面，填写姓名、电子邮件、密码和确认密码等信息，提交表单后，后端验证信息的合法性，若合法则将用户信息存入数据库。
登录：用户在/login页面输入用户名和密码，后端验证用户信息，若验证通过，则允许用户登录系统，并根据用户角色展示相应的功能界面。
商品管理功能
添加商品：管理员登录后，访问/add_product页面，选择商品类别，填写商品名称、描述、数量、原价、售价等信息，上传商品照片，提交后将商品信息插入数据库。
删除商品：在商品管理后台（如/dashboard），管理员可以看到商品列表，点击 “删除” 按钮，即可从数据库中删除相应商品记录。
编辑商品：在商品管理后台，点击 “编辑” 按钮，可对商品的各项信息进行修改，修改后更新数据库中的商品记录。
商品可视化管理功能：在/job页面，通过从数据库中查询商品销售数据，使用图表库（如 Matplotlib、Echarts 等，文档未明确提及具体使用哪个库）生成各类商品销售占比、不同种类商品平均价格等图表，直观展示商品销售情况。
2.3 系统流程设计
2.3.1用户注册流程
用户访问注册页面。
填写注册信息。
系统验证信息格式和唯一性。
若验证通过，将用户信息存入数据库，注册成功；否则提示错误信息。
2.3.2用户登录流程
用户访问登录页面。
输入用户名和密码。
系统验证用户信息。
若验证成功，根据用户角色展示相应页面；否则提示错误信息。
2.3.3商品添加流程
管理员登录系统。
访问添加商品页面。
填写商品信息并上传照片。
系统将商品信息插入数据库，添加成功。
2.3.4商品删除流程
管理员在商品管理后台选择要删除的商品。
系统从数据库中删除该商品记录。
2.3.5商品可视化流程
系统从数据库中查询商品销售数据。
使用图表库对数据进行处理和可视化展示。
